<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Skyjoy</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.skyjooy.cn/"/>
  <updated>2020-01-20T07:35:20.563Z</updated>
  <id>http://www.skyjooy.cn/</id>
  
  <author>
    <name>Mr.chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记考研之后的旅行</title>
    <link href="http://www.skyjooy.cn/2020/01/20/%E8%AE%B0%E8%80%83%E7%A0%94%E4%B9%8B%E5%90%8E%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    <id>http://www.skyjooy.cn/2020/01/20/记考研之后的旅行/</id>
    <published>2020-01-20T07:23:13.000Z</published>
    <updated>2020-01-20T07:35:20.563Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2020年1月13日，考研对于个人来说似乎是风轻云淡，但是这种风轻云淡也使得自己缺乏了十足的动力。<a id="more"></a><br>倘若今年考研失败大部分就是这种“不追求”所造成的，大概也需要自己好好检讨态度和目的追求。<br>对于“玩”，每个人都有每个人不同的定义。至于旅行，家里人更喜欢用玩来称呼，对于我来说，是恶补人生经历的一种方式，在旅途中遇到的不同人和不同事情往往会促使我对这个社会产生更多不同于以往的反思。<br>在去往北京之前我就想，作为一个从小在南方内陆长大的孩子，从没感受到那样干燥的空气。记忆中的冬天就是从头冷到脚的冷，虽然冷，但是鞋子还是因为汗气越穿越湿。而北京，相距武汉穿越好几个纬度的城市，中国的首都，政治经济文化中心，更多的，有着无数在北京献祭青春的年轻人。在没有亲眼看到之前，可能可以想象到那个城市的模样，却难以感受到城市的呼吸。<br>我对于北京的印象，起源于郁达夫先生的文章《故都的秋》，悲凉和孤独。在长大之后对于国家命运前途开始更加关心，于是对于北京的印象更来源于1989年的政治风波，无数的年轻人出于或单纯或盲目的动机来到了广场争取了自以为心中的理想国。历史早已经过去，很难窥到当时事件的全貌，只是惋惜当时另走他路的优秀的年轻人和在暴虐中牺牲的官兵。<br>从家里出发先行到了郑州，在去郑州之前看了记录片《城市记忆-郑州》。从片子里知道了郑州站是全国人流量最大的火车站，位居京广线和陇海线的交接处。因为交通的原因建国初期就将省会从开封换为了郑州，而郑州的棉纺产业一度位于全国第一，至今仍然保留着大量的棉纺厂社区，闻名遐迩的四厂烩面老板便是棉纺厂职工出身。到达郑州之后先行到了信工大的同学，听着他们的吐槽，老友之间的笑料，时间很快就过去了。<br>不得不分享一个关于吴同志的故事。一日老吴衣冠不整在路上行走，纠察见面就问：“同志你是哪个单位的，证件出示一下”，老吴反口问道：“你认识我吗？”。纠察同志从未见过如此反映，一愣回答道：“不认识，怎么了”。未曾想老吴撒腿就跑，可是两条腿哪比得上人家开了小巡逻车的纠察，分分钟就抓住。教训之后让队领导领回去了，若能了解里面的严厉和纪律，就能知道此事实在是令人捧腹大笑。<br>北方人喜爱牛羊，在郑州就已经体会到了。颇有大名的河南烩面精华不在面，而在面汤。老岳带我去吃的“萧记烩面”实属不错，20RMB一碗，白汤的羊肉味道非常浓，不太腥，充斥着羊肉固有的肉香味。吃完之后一段时间，唇齿留香，味蕾不停向大脑传输羊肉香味，好评。<br>在郑州仅停留一天，很难去客观公正的评价这个城市，只能叙述个人印象以留之后自己回忆。郑州东站下车之后大概十五分钟地铁之后才到路面，于我而言对一个城市的第一印象往往是地铁设施。五号环线（可能有误）的地铁车厢很大很宽敞，行驶噪音也很正常，票据采用卡片形式，但是没有任何标志性的图案。车厢里有很多年轻人，有说河南话也有普通话的，另外就是每个城市都会见到的婆婆和媳妇一起带着孩童，聊着家里家常。公交到达信工大之后印象非常深刻，信工大所在的那片区域可能是一个规划全新的区域，四通八达直来直往双向八车道带栏杆以及人行道的马路，路上极少有垃圾。公交车上有USB充电口，后门下车处有一个STOP按钮，按下去之后司机处会不停响铃，老幼病残处涂了特殊颜色的座椅。去的时候天气正好，可以说天朗气清惠风和畅。这就是郑州带给我个人的第一印象，俨然一副蒸蒸日上的中原大都市。但是翌日来到一些老城区，例如二七纪念塔附近，凌乱不堪，商场几近关门，没有多少游客，路边响着家里县城会有的大喇叭广告。郑州的一大特色就是路上电动车极多，经常性的会抢占四轮机动车车道。电动车多的程度可能堪比在20世纪八九十年代的自行车大军。<br>不可能不提到的就是棉纺厂社区了，作为以前的棉纺重镇郑州现在还有很多的类似社区。去的四厂社区已经被改造的很好，入口处有社区地图，主要道路平整。那天天气很好，路边的老人都出来晒太阳，听着其中一位聊着媳妇如何刻薄，自己尽心尽力还被嫌弃，免不了有些想笑。进去转了一下，担心私自拍摄人像引起老人不悦，所以相机从没有拿出来过，但是当时的那种市井气息是值得记忆的。我一直觉得在现代化的进程中，最熟悉城市记忆的莫过于这些老人，从他们的言语和眼神中你似乎能感受到一个个城市独有的味道。我最遗憾的就是现在这种味道正在逐渐的消失，现在的年轻人早已经不自知被浸染上了都市的气息，就如同中国大山深处一个一个正在消失的村庄一样，回忆也逐渐的流逝掉了。<br>见往日旧友，是前往郑州的主要目的，其实时隔也就半年，所以往日的欢笑依旧，只是说再见的时候不免还是有些伤感，体制内外，时间一长，隔阂总会越来越深。<br>那日晚上从郑州东前往北京西，一上车很明显的都是来自五湖四海的人，大家都说着普通话，细微之中总能听出方言的微微差异。坐在左边的可能小姐姐可能是京城某个大学的研究生，用着13款的MacBookair，还在努力的看着pdf和表格，用学生证购的票，精致淡雅的妆容恰到好处。右边的大哥不太像学生，发车时正好在拿switch准备玩游戏，发车的抖动让他把卡带全掉到地上找了半天，后来终于找到，玩起了类似怪物猎人的游戏。<br>短短几天之内，我适应不了北京。<br>北京是一个很复杂的城市，以至于我已经无法客观的去叙述这个城市。刚到的时候检票大叔浓重的京腔无时无刻不提醒着我已经到达了北京，但是下了出租车丰台区的“落后”却让我感觉似乎到了若干年前的古田路。这是北京吗？夜里凌晨一点，等了二十分钟四路夜车坐了将近一个小时到新市口（名字可能记错了）吃上了心心念念的卤煮。可能北方人习惯了敬称“您”，吃卤煮的大叔对我称呼“您”让我感到非常的不自在。<br>一个人吃着卤煮，喝着北冰洋，听着一屋的北京爷们儿侃天侃地，那是一种奇妙的感觉。你离开了熟悉的环境，来到了一个完全陌生的地方，我渴望着去了解人世间运行的奥妙，有时候却感慨可能根本就没有什么规则，人大概都是遵循无规律运动。<br>在北京遇到了很多意想不到的事情，我从没想过原来干冷不只是干而且真的很冷，心理和生理上的冷。原来王府井商圈旁边就是一簇矮小的平房，里面住着一些神秘的原住民。我也未曾想过路边遇到的牛肉饼小店的饼会这么好吃，一起排队的小孩子那么可爱。<br>雨情跟我说在北京生活，如果感觉很累，某天在天桥上看看来往的车流，可能这就是来北京的意义。那天我在去白塔之光青旅的一个天桥上站了很久，站了很久很久，也想不到假如我时日飘到北京看着这车流会找到任何的意义。是的，我找不到北漂的意义。<br>北京是个什么样的城市，我回想了一下，它只不过是位于北方的一个在国家发展进程中领先的大城市，京城的味道早就被首都磨的七零八落，难以寻找到踪影。不知道末代皇帝溥仪买票进入故宫时是一种什么样的感受，但是在我透过门缝窥探到故宫的破败之时，物是人非的感觉应该是相似的。<br>在北京旅行的意义，大概是看到在凌冽北风里面拉着二胡的老大爷往他的帽中投入的几块钱，或是在地坛的大平面上感慨万千，或是在吃完夜宵的路上看到夜车里面咪睡着的代驾大哥，或是路上遇到没法坐公交的情侣给了他们零钱，听到那个女孩子悄咪咪的说“这个世界还是好人多”我真的很开心。在路上走的时候看到一个小巷子走了进去，遇到了骑自行车的老人。<br>时间，历史，生活，相遇，这可能就是去北京旅行的意义。<br>感恩世界和生活，愿世界和平。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2020年1月13日，考研对于个人来说似乎是风轻云淡，但是这种风轻云淡也使得自己缺乏了十足的动力。
    
    </summary>
    
      <category term="随笔" scheme="http://www.skyjooy.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="回忆" scheme="http://www.skyjooy.cn/tags/%E5%9B%9E%E5%BF%86/"/>
    
      <category term="随笔" scheme="http://www.skyjooy.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>数据链路层学习笔记</title>
    <link href="http://www.skyjooy.cn/2019/10/13/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.skyjooy.cn/2019/10/13/数据链路层学习笔记/</id>
    <published>2019-10-12T16:00:00.000Z</published>
    <updated>2019-10-13T04:04:35.739Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是数据链路层，以及数据链路层的主要任务"><a href="#什么是数据链路层，以及数据链路层的主要任务" class="headerlink" title="什么是数据链路层，以及数据链路层的主要任务"></a>什么是数据链路层，以及数据链路层的主要任务</h3><h4 id="What-is-data-link-layer-and-what’s-the-main-task-of-the-data-link-layer"><a href="#What-is-data-link-layer-and-what’s-the-main-task-of-the-data-link-layer" class="headerlink" title="What is data link layer, and what’s the main task of the data link layer."></a>What is data link layer, and what’s the main task of the data link layer.</h4><a id="more"></a><p>链路 link 就是在通信时沿着通信路径相邻结点的通信信道。数据链路则为加上各种通信协议的链路。</p><p>数据链路层主要任务之一就是保证数据在链路层传输时为<strong>透明传输</strong>（传输任意内容都不会发生错误。上层协议无需在意协议具体的操作过程，数据仿佛在黑盒里面传输）。</p><hr><h3 id="1-1-举一个栗子"><a href="#1-1-举一个栗子" class="headerlink" title="1.1 举一个栗子"></a>1.1 举一个栗子</h3><p>举例来说数据链路层的其他作用以及透明传输的体现。我们把链路层的数据单位“帧”，想象成一个旅行的小朋友小明。小明先要从家中乘坐汽车到县城的火车站，然后搭乘火车从县城到天河机场，最后乘坐飞机到目的地。在旅行之前，小明就要带好自己的各种证件和行李，准备完成之后就要出发了，刚开始，一路上也有很多汽车，为了不与其他汽车发生事故，小明的司机需要听从红绿灯或者交通指示牌的指示行进。当然小明也可以乘汽车到任意位置，比如去超市再买一些零食之类。到达火车站上了火车之后，火车司机以及调度员需要确认铁路线路正常，继而发车。在铁轨上行进时由于在这段铁轨上只有小明这一趟火车，所以确认发车后小明无需等待红绿灯，要求之内任意通行就可以。到达飞机场，安检需要确认小明的身份，证明是小明，而且不是缺胳膊少腿的小明，并且小明的行李也不能超重，否则就不能带上飞机。在空中也不需要等红绿灯，最后小明到达了目的地。</p><p>我们可以将这段过程分为两大类。一段是乘坐火车和飞机。因为这样的交通工具我们可以<code>近似</code>的看为行进路线上只有自己，所以<strong>无需协调与其他交通工具的关系</strong>。类似这种形式的链路称为点对点信道Point-To-Point。在普通家庭进行拨号连接上网时，大多都是基于 PPPoE（Point-to-Point Protocol Over Ethernet）协议，而此协议在其中封装集成了后面会介绍的点对点协议（Point to Point Protocol，PPP）。</p><p>第二段是驾驶汽车，需要<strong>协调与其他车辆的关系避免发生碰撞事故</strong>，并且小明可以去到汽车能去的任意位置。类似这种形式的链路称为广播信道Broadcast Channel。在学校或者抽象说在局域网内进行通信时，需要协调与其他终端的通信，在同一条信道中如果不采取措施直接传输，那么信号就会发生<strong>碰撞</strong>失效。无论是后面将要介绍的信道划分协议，或者随机访问，轮询访问协议都是为了解决这个问题产生的。</p><h3 id="1-2-数据链路层的主要功能"><a href="#1-2-数据链路层的主要功能" class="headerlink" title="1.2 数据链路层的主要功能"></a>1.2 数据链路层的主要功能</h3><h5 id="1-2-1-封装成帧"><a href="#1-2-1-封装成帧" class="headerlink" title="1.2.1 封装成帧"></a>1.2.1 封装成帧</h5><p>在旅行之前，小明需要带上行李和证件变成旅行状态的小明。这就是链路层的成帧功能。数据链路层需要把网络层的数据包加上首部和尾部封装成<strong>数据帧</strong>。因为计算机网络体系封层结构的重要原因就是保证各层之间看起来要像是<strong>平行通信</strong>，所以无论是哪种网络层协议，数据链路层都要将其封装成统一的数据帧格式。<br>不同数据链路层协议的首部和尾部都不尽相同，但是一定有一个任务就是确定帧的范围-<strong>帧定界</strong>，从何处开始到何处结束为一个帧。而传输的数据内容可能会和约定好的帧定界内容冲突，所以引出链路层的第二个功能。</p><h5 id="1-2-2-透明传输"><a href="#1-2-2-透明传输" class="headerlink" title="1.2.2 透明传输"></a>1.2.2 透明传输</h5><p>为了避免帧定界错误，链路层协议采用了如下几种方法。<br><code>1.字符计数法</code><br>字符计数法就是在帧头部使用计数字段表明帧内有多少字符。例如44637824658这段字符其实是两帧的内容。第一位 4 表明第一个帧有四个字符为 4463 ，然后的第一位 7 表明第二个帧有 7 个字符7824658。这种方法简单易错，只是了解。<br><code>2.字符填充首尾定界法</code><br>当传送由文本文件组成的帧时。SOH 与 EOT 用来表示帧的开始和结束。当文本内容中出现定界符就会发生错误。采用转义字符 ESC 插入数据部分中与定界符相同的字符，来区分定界符与数据部分偶然出现的与定界符一致的内容。<br>例如网络层发送的数据 ADHFUASOHA，那么数据链路层就会填充为 <del>SOH</del>ADHFUA<del>ESC</del>SOHA<del>EOT</del><br><code>3.比特填充首位标志法</code><br>比特填充法利用特定的比特序列0111110 来界定一帧的开始和结束。为了避免定界符错误，在数据比特流中如果出现5 个连续的 1 就在其后强制加入 0.</p><h5 id="1-2-3-差错控制"><a href="#1-2-3-差错控制" class="headerlink" title="1.2.3 差错控制"></a>1.2.3 差错控制</h5><p>小明到达机场后工作人员必须确认小明是正常的小明。对于数据来说就是没有产生差错的数据。介绍两种差错检验的方法。<br><code>1.奇偶校验</code><br>假设对于传输的 d 个数据比特0111000110101011 偶校验就是在其后加上一个附加比特，使得 这d+1 个比特中 1 的总数是偶数，奇校验就是成为奇数。但是如果数据比特发生偶数个比特错误就会发现这种校验方法失效。二维奇偶校验具有更好的性能，还具备一定的纠错能力，不过多介绍。<br><code>2.循环冗余检测（Cyclic redundancy check ）</code><br>这种方法稍微复杂一些，在了解这个方法之前需要了解一个基础知识就是模二除。这是一种算数方法，重点是不借位不进位。<img src="https://raw.githubusercontent.com/whuchenshuo/whuchenshuo.github.io/master/images/mo2chu.png" alt=""><br>具体步骤如下：<br>1.首先接收双方商定一个比特序列G，称为生成多项式。假设为 1101<br>2.假设发送数据为 M 总共有 k 位，具体假设 M为101001，此时 k=6<br>3.用 M 与 G 进行模二除运算得到余数为 R，这里得到的余数为 001（位数比 G 少一位）<br>4.将余数 R 加到发送数据 M 之后，将为了检错而添加的冗余码称为帧检验序列（Frame Check Sequence   FCS）此时 FCS就是 R<br>5.接收方收到数据后，如果用 M+R 与约定多项式 G 进行模二除法，没有余数则数据无误，否则数据产生错误</p><p>CRC检测可在硬件中进行，所以速度非常快。经过检验之后的数据我们可以近似的认为<strong>凡是数据链路层接受的数据帧都没有错误</strong>，因为有错误的都被丢弃了。</p><p>另有汉明（海明）编码（Hamming Code），可以对数据码进行纠错。主要原理就是建立校验码和数据码的线性关系，谢教材和 Computer Networking A Top-Down Approach都没有详细介绍，所以也不过多介绍。<br>对于现在的互联网来说，差错控制已经非常先进，对于通信质量比较好的链路可靠交付往往通过上层来实现。而通信质量差的链路则通过数据链路层来实现</p><h3 id="1-3-点对点通信"><a href="#1-3-点对点通信" class="headerlink" title="1.3 点对点通信"></a>1.3 点对点通信</h3><h5 id="1-3-1-点对点协议PPP"><a href="#1-3-1-点对点协议PPP" class="headerlink" title="1.3.1 点对点协议PPP"></a>1.3.1 点对点协议PPP</h5><p>PPP 可用于用户到 ISP（Internet Service Provider）的通信，是使用串行线路通信的面向字节的协议，所有 PPP 协议的长度必定是字节的整数倍。<br>PPP 协议有三个部分：第一就是封装 IP 数据报到串行链路的方法。第二就是链路控制协议 LCP（Link Control Protocol），用来建立、配置和测试数据链路连接的协议。第三就是网络控制协议 NCP（Network Control Protocol），为网络层协议建立和配置逻辑连接。<br>PPP 协议的具体过程如下图<br><img src="https://s2.ax1x.com/2019/10/12/uLOuSe.md.png" alt=""><br>PPP 协议虽然简单，但是已经不再是简单的链路层协议。NCP 协议部分可以给用户动态分配 IP地址。而且也可根据不同的网络层协议交换网络层特定的网络控制分组，使得 PPP 协议能够支持不同的网络层协议。<br>PPP 有两种不同的实现透明传输的办法。当 PPP 使用异步传输时，就使用字节填充方法实现透明传输。而使用同步传输时，则使用比特填充方法，目的都是为了确定帧的结束。<br>PPP 只支持全双工的点对点链路通信，不提供可靠传输，只能对数据进行差错检验（通过硬件实现 CRC校验）</p><h5 id="1-3-2-高级数据链路控制（High-level-Data-Link-Control-HDLC）"><a href="#1-3-2-高级数据链路控制（High-level-Data-Link-Control-HDLC）" class="headerlink" title="1.3.2 高级数据链路控制（High-level Data Link Control  HDLC）"></a>1.3.2 高级数据链路控制（High-level Data Link Control  HDLC）</h5><p>HDLC协议也是链路层协议，面向比特。在以前通信链路的质量不够好时，HDLC 因为能够提供可靠交付曾经非常流行，现在已经很少使用。<br>HDLC 帧有三种，信息帧、监督帧以及无编号帧。通过对信息帧进行编号来实现可靠交付。<br>HDLC 协议定义了主站、从站以及混合站，借此可以使用链路的非平衡配置和平衡配置。非平衡配置就是说主站控制整个链路的运行。平衡配置就是两个站可以平等的发起数据传输，不需要另一方的允许。<br>HDLC 协议用比特填充法实现透明传输。</p><h3 id="1-4-广播信道"><a href="#1-4-广播信道" class="headerlink" title="1.4 广播信道"></a>1.4 广播信道</h3><p>我们在之前举了小明旅行的例子。在小明驾驶车辆的过程中需要协调与其他车辆的关系避免发生碰撞事故。从此引出数据链路层第二大类访问协议-随机接入协议，此类协议最重要的就是协调<strong>碰撞</strong>的处理</p><h5 id="1-4-媒体访问控制（Medium-Access-Control-MAC）层"><a href="#1-4-媒体访问控制（Medium-Access-Control-MAC）层" class="headerlink" title="1.4 媒体访问控制（Medium Access Control  MAC）层"></a>1.4 媒体访问控制（Medium Access Control  MAC）层</h5><p>对于MAC 这个简称我觉得就有很多误解。<br>首先Medium Access Control在计算机学科考研大纲中称为介质访问控制，谢希仁的教材中称为媒体接入控制。个人认为把 Medium 译为媒体还是更为合理一些的。因为 MAC 协议本质是协调多个节点的传输。<br>第二点 MAC 地址和 MAC 协议常常没有区分太清。因为 MAC 地址和局域网也就是利用的广播信道的数据链路是不可分离的。只要在局域网中传输一定需要 MAC 地址，如同上网需要 IP 地址一样， 而 MAC 协议是控制局域网传输的必要条件。两个 MAC 其实本质不太相同<br>所以 MAC 地址称为硬件地址或许更不会引起误解一些，而 MAC 则是数据链路层协议的一部分，一个子层。用于广播信道，协调节点随机接入。<br>谢的教材中将 MAC 子层放在以太网中教学，初学会感觉 MAC 协议是以太网专属的一类协议。其实只是以太网使用了广播信道的技术，自然而然和 MAC 层结合到了一起。</p><p>为了避免碰撞一般采用两类方法，第一类是静态划分信道方法，第二类是动态方法。  </p><h6 id="信道划分-媒体访问控制"><a href="#信道划分-媒体访问控制" class="headerlink" title="信道划分 媒体访问控制"></a>信道划分 媒体访问控制</h6><p>信道划分是一种静态方法，即可以想象成小明驾驶车辆分车道，或者分层（假如车能在空中飘浮着行驶）。一般来说有以下几种：<br>1.FDM（频分多路复用）将带宽（这里指的带宽为通信意义上的带宽，即频率范围）划分为若干个子信道，各信道占据不同的频率，中间预留一部分的保护频带。<br>2.TDM（时分多路复用）将时间分割开，后来衍生出了更科学的 STDM（统计时分多路复用）。主要原理都是规定一段时间间隔内只有一个结点可以发送信号，轮流分配时间给信号占用。<br>3.WDM（波分多路复用）光纤中的方法，和 FDM 实质是一样的，只不过是划分不同波长的光信号<br>4.CDM（码分多路复用）通过，共享频率和时间。举个栗子：小红运输红豆，小进运输绿豆，小退运输黄豆。他们没有办法只能将其放在一辆车中混着运输，但是因为可以分辨颜色所以不会产生混淆，到达目的地后再用工具将这几种不同颜色的豆子分开。CDMA （Code Division Multiple Access）码分多址是码分复用的一种技术，通过规定站点发送码片相互正交来避免干扰。这里牵扯到线性代数规格化内积的内容，不再介绍。因为这种技术抗干扰，保密性好，主要用于无线通信系统中。</p><h6 id="轮询-媒体访问控制"><a href="#轮询-媒体访问控制" class="headerlink" title="轮询 媒体访问控制"></a>轮询 媒体访问控制</h6><p>轮询即轮流发送，典型的是令牌传递协议。是一种动态划分信道的方法。令牌在各个节点之中循环，如果需要发送信息则独占信道发送，发送完成之后将令牌传递出去。<br>要注意的是令牌在设备之间的逻辑链路必须是一个环</p><h6 id="随机访问-媒体访问控制"><a href="#随机访问-媒体访问控制" class="headerlink" title="随机访问 媒体访问控制"></a>随机访问 媒体访问控制</h6><p>这部分内容是数据链路层的重点。局域网技术在计算机网络中的地位非常重要，而以太网技术则是目前应用最多的一种局域网技术（是的，以太网是一种技术，而不是一个网络的名字，可以_近似_认为 IEEE 820.3局域网简称为以太网。）。<strong>随机访问控制就是以太网技术中的重点</strong>。<br>1.CSMA/CD 协议<br>首先介绍以太网使用的 CSMA/CD 协议（Carrier Sense Multiple Access with Collision Detection，载波监听多点接入/碰撞检测）。<br>看名称就可以发现其中的几个要点。<br>第一个就是“多点接入”，CSMA/CD 协议使用与总线型网络，计算机以多点接入的形式连接到一起。<br>第二个“载波监听”，意思是一边发送一边借助电子技术监听。每个站必须不停监听信道状况，及时发现信道是否空闲，或者是否发生碰撞。<br>第三个“碰撞检测”就是不断监听碰撞，因为信号的传播需要时间，所以哪怕在信道空闲发送信号依然可能产生碰撞，因为别的计算机可能和你同时发送信号。<br>在详细介绍CSMA/CD 协议之前需要明白一个定义，<strong>端到端时延</strong>，在后面的网络层这个概念也时分重要，即两倍的总线端到端信号传播时延，假设入线路长 1km，光信号在光纤中以光速传播，那么端到端时延τ即为 1000/(3x10^8)。</p><hr><p>协议的具体执行过程如下<br>1.假设主机现在检测到信道空闲，开始发送数据。（数据传输速率是指的发送速率，而非传播速率，传播速率是接近光速的）<br>2.如果开始发送数据的两倍端到端时延（最坏情况刚好到达目的地发生了碰撞）之后还未发生碰撞，那么就可以确定这这一帧数据发送成功。因此这段时间也叫做<strong>碰撞窗口期</strong>或者说争用期<br>3.如果还未发送完毕就发生了碰撞，那么主机停止发送数据，接着发送一个 32 或者 48 比特的人为干扰信号。之后等待一个<strong>随机时间</strong>之后回到继续监听信道是否空闲的状态，空闲之后重传发生碰撞的帧。<br>这个随机时间的确定算法名为<em>截断二进制指数退避算法</em>。算法规定了基本的退避时间为两倍的端到端时延 2τ，然后从（0,1,···,2^k-1）中选择一个整数倍乘上基本退避时间（争用期）。k 为重传数据帧的次数，k 上限为 10.也就是最坏的情况主机重发了 10 次还未成功而且需要等 1023 倍争用期的时间才能再次监听信道确定是否重传。如果发送 16 次还未成功则丢弃此帧向高层报告，说明同时发送数据的站点太多。<br>为了让发送出去的帧基本上都是有效帧，帧长不能过短，否则在这一帧数据传输完毕还没有检测到已经发生了的碰撞，数据失效。在以太网中这个最短的帧长为 64Byte，如果传输数据小于64Byte 还要进行填充。如果链路中存在小于 64Byte 的帧那么一定是由于冲突破坏了的无效帧。</p><p>以太网还规定了最小的帧间间隔 9.6 μs，以便清理缓存。非以太网，其他使用 CSMA/CD 协议网络中最小帧长的计算公式如下：<br>最小帧长=2 倍端到端时延 x 数据传输率</p><p>2.ALHOA 协议<br>由于以太网的普及 ALHOA 协议使用已经较少。纯 ALHOA 简单来说就是想发就发，如果发生碰撞就等待随机时间重发。时隙 ALHOA就是把用户时间同步之后把时间分成时间片段，只能在时间片段内发送，减小了碰撞的几率，但是效率仍然不高。</p><h3 id="1-5-局域网技术"><a href="#1-5-局域网技术" class="headerlink" title="1.5 局域网技术"></a>1.5 局域网技术</h3><p>为什么又要把局域网单独拿出来讲，因为局域网的知识点不仅仅在于以太网使用的 CSMA/CD 算法，还有局域网的发展，使用的其他一些协议也相当重要。</p><p>局域网是指在一定的地理范围内由各种计算机设备通过连接介质连接起来的互联网络。主要特点是一般 为单位所有，办公室、学院等。局域网的通信质量较好，能进行广播和组播。</p><h5 id="1-5-2-MAC-地址"><a href="#1-5-2-MAC-地址" class="headerlink" title="1.5.2 MAC 地址"></a>1.5.2 MAC 地址</h5><p>MAC 地址，或者说物理地址，硬件地址，用来标志唯一的硬件设备。它是在数据链路层用来确定目标的重要标识。<br>我们已知上网一定会有 IP 地址，那么已经有了 IP 地址为什么还需要 MAC地址。简单说来就是为了实现计算机网络的分层体系。而且 IP 地址是可以动态变化的。<br>MAC 地址是一段设备被生产出来就确定了的一串标识符。如果在一个网段中出现了两个 MAC 地址一样的设备，那么他们都无法进行正常通信。推测目前校园网中限定上网设备数量就是通过检测记录 MAC 地址数量来确定的。插一句就是 MIUI11 中我们可以主动选择 隐藏真实MAC地址而采用动态随机地址，细节。</p><h5 id="1-5-1-以太网"><a href="#1-5-1-以太网" class="headerlink" title="1.5.1 以太网"></a>1.5.1 以太网</h5><p>因为以太网技术在局域网中的统治地位，目前以太网已成为局域网的代名词。<br>以太网的逻辑拓扑结构是总线型，物理结构为星型或者拓展星型。以前各种局域网技术互相竞争的时候，IEEE 为了保障通信制定了一系列的局域网标准规范。IEEE 802委员会把链路层分为了 LLC（Logical Link Control 逻辑链路控制） 和 MAC 子层。一个用来控制链路，一个用来控制接入媒体。到后来以太网取得市场地位后 LLC 子层已经失去了原有的作用，以至于现在很多网络适配器厂商在硬件上没有安装 LLC 协议而只有 MAC协议（适配器的作用是实现外部网络和计算机内部信号的通信，例如串行并行传输转换，缓存来不及传输的数据等）</p><p>最早的时候以太网物理结构同样为总线型，后来集线器（hub）的出现改变了以太网的物理结构。集线器是物理层设备，同样拥有芯片，功能可以说是强化信号之后向所有结构继续发送，作用于比特而不是帧。于是出现了如图所示的星型结构。<br><img src="https://s2.ax1x.com/2019/10/13/ujXZon.png"><br>需要注意的是集线器只是简单的强化信号，所以以太网的帧数据同样经过以太网之后并没有实质区别，集线器并不能隔绝冲突域和广播域。而另一个设备交换机则可以隔绝冲突域，具有转发功能。开启了 VLAN（虚拟局域网）功能的交换机还可以隔绝广播域。</p><p>以太网发展到现在已经超越了局域网的范围应用到城域网和广域网上面，PPPoE 就是一种将以太网技术结合 PPP 帧应用到宽带接入的实例。以太网的速度也越来越快。100BASE-T 使用双绞线的以太网可以发送 100Mb/s 的基带信号，既支持全双工模式，也支持办双工模式</p><p>参考文献主要是谢希仁的《计算机网络》以及《Computer Networking A Top-Down Approach》 写的太烂了，以后再慢慢改吧。拜（四声）拜（轻声）</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是数据链路层，以及数据链路层的主要任务&quot;&gt;&lt;a href=&quot;#什么是数据链路层，以及数据链路层的主要任务&quot; class=&quot;headerlink&quot; title=&quot;什么是数据链路层，以及数据链路层的主要任务&quot;&gt;&lt;/a&gt;什么是数据链路层，以及数据链路层的主要任务&lt;/h3&gt;&lt;h4 id=&quot;What-is-data-link-layer-and-what’s-the-main-task-of-the-data-link-layer&quot;&gt;&lt;a href=&quot;#What-is-data-link-layer-and-what’s-the-main-task-of-the-data-link-layer&quot; class=&quot;headerlink&quot; title=&quot;What is data link layer, and what’s the main task of the data link layer.&quot;&gt;&lt;/a&gt;What is data link layer, and what’s the main task of the data link layer.&lt;/h4&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="http://www.skyjooy.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="记录" scheme="http://www.skyjooy.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Qt以及其他知识部分总结</title>
    <link href="http://www.skyjooy.cn/2019/07/17/Qt%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93/"/>
    <id>http://www.skyjooy.cn/2019/07/17/Qt以及其他知识部分总结/</id>
    <published>2019-07-16T18:15:00.000Z</published>
    <updated>2019-07-17T07:53:25.465Z</updated>
    
    <content type="html"><![CDATA[<p>这几天花了很多时间在python的ui处理上，收获了很多经验，也浪费了很多时间，写下这篇总结之后就安心学习了<br><a id="more"></a></p><p><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/cn/album/shame/1090397052?i=1090397056"></iframe></p><h5 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h5><p>python3.6 macOS Mojave</p><h5 id="涉及到的库"><a href="#涉及到的库" class="headerlink" title="涉及到的库"></a>涉及到的库</h5><p><a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/" target="_blank" rel="noopener">PyQt5</a> <a href="https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_tutorials.html" target="_blank" rel="noopener">open-cv</a> <a href="http://c.biancheng.net/view/2690.html" target="_blank" rel="noopener">pyinstaller</a> <a href="https://docs.python.org/3/library/time.html" target="_blank" rel="noopener">time</a> <a href="https://docs.python.org/3/library/datetime.html" target="_blank" rel="noopener">datetime</a> <a href="https://www.jianshu.com/p/7f7886259130\" target="_blank" rel="noopener">os</a></p><h4 id="有关PyQt5的使用"><a href="#有关PyQt5的使用" class="headerlink" title="有关PyQt5的使用"></a>有关PyQt5的使用</h4><p>PyQt5的安装同样可以使用pip3 intsall命令来进行，要注意的是如果要将GUI文件打包，另外需要pip3 install sip<br>PyQt5的文本往往由以下命令来显示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.lineEdit.setText(<span class="string">'需要显示的文本'</span>)</span><br><span class="line">self.label.setText(<span class="string">'需要显示的文本'</span>)</span><br></pre></td></tr></table></figure></p><p>而获取文本则和C#类似用text方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str1 = self.lineEdit.text()</span><br></pre></td></tr></table></figure></p><p>在使用PyQt5进行软件设计时，Qt designer是一个非常好的工具，与VS中C#的窗口控件一样好使。将Qt designer和PyUIC加入PyCharm的Extenal tool后设计UI就很简单。具体过程如下<br>1.首先用designer设计好界面生成UI文件<br>2.用PyUIC将UI文件转化为python文件，生成的python文件内容结构往往如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore,  QtWidgets</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> pyqtSlot</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMessageBox</span><br><span class="line"><span class="comment">#可能另有其他引用，根据使用的控件不同</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UI_Windowname</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setupUI</span><span class="params">(self, Windowname)</span>:</span></span><br><span class="line">MainWindow.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">277</span>, <span class="number">190</span>)</span><br><span class="line">        ～～～～～</span><br><span class="line"><span class="comment">#等等根据控件自动生成设置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, Windowname)</span>:</span></span><br><span class="line">_translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"title"</span>))</span><br></pre></td></tr></table></figure></p><p>倘若想改变UI则重新设计好UI文件好重新生成py文件即可，注意引用更新即可。* 整个项目的文件结构往往如下所示：<br>—project name<br>    –—main.py<br>    –—projectUI.py<br>    —–projectUI.UI<br>    —–project.py<br>    —–requirements.txt<br>    —–README.md<br>在project.py中利用super语句继承projectUI的父类即可获得相关属性以及方法<br>例如:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span><span class="params">(QMainWindow, UI_projectUI)</span></span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span></span></span><br><span class="line"><span class="class"><span class="title">super</span><span class="params">(Project, self)</span>.<span class="title">__init__</span><span class="params">(parent)</span></span></span><br><span class="line"><span class="class"><span class="title">self</span>.<span class="title">setupUI</span><span class="params">(self)</span></span></span><br></pre></td></tr></table></figure></p><p>PyQt是利用信号与槽机制来实现功能的（signal-slot），可以理解为信号触发槽，不一定为一对一连接。<br>在代码首部引用<strong>PyQt5.QtCore</strong>之后便可以利用函数装饰器来进行<strong>事件</strong>的激活。例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@QtCore.pyqtSlot()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_pushButton_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>给控件加快捷键在代码层面实现如下:<br><code>self.pushButton.setShortcut(_translate(&quot;MainWindow&quot;, &quot;Return&quot;))</code><br>这样就把pushButtom的快捷键设置为了回车<br>QMessageBox的应用比较简单，不再赘述</p><hr><h4 id="有关pyinstaller的使用"><a href="#有关pyinstaller的使用" class="headerlink" title="有关pyinstaller的使用"></a>有关pyinstaller的使用</h4><p>pyinstaller比py2app强太多。<br>具体命令一般为<code>pyinstaller -选项 脚本.py</code>，选项有-F，生成单个可执行文件，—w 生成GUI窗口；-c 命令行执行；-i 后跟icon路径加上图标。另可-D生成可查看错误结果的文件。-D后将文件放入终端中即可查看程序返回结果<br>示例：<br><code>pyinstaller -F -w -i /Users/name/Desktop/cat.ico main.py</code></p><hr><h4 id="有关python-time库的使用"><a href="#有关python-time库的使用" class="headerlink" title="有关python time库的使用"></a>有关python time库的使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">time.localtime()</span><br><span class="line"><span class="comment"># 会返回一个 time.struct_time类 具体结构举例如下</span></span><br><span class="line">time.struct_time(tm_year=<span class="number">2019</span>, tm_mon=<span class="number">7</span>, tm_mday=<span class="number">17</span>, tm_hour=<span class="number">14</span>, tm_min=<span class="number">18</span>, tm_sec=<span class="number">34</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">198</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line">datetime.date()</span><br><span class="line"><span class="comment"># 会返回 datetime.date 类</span></span><br><span class="line">datetime.date(<span class="number">2019</span>, <span class="number">7</span>, <span class="number">17</span>)</span><br><span class="line">datetime.datetime</span><br><span class="line"><span class="comment"># 会返回datetime.datetime 类</span></span><br><span class="line">datetime.datetime(<span class="number">2019</span>, <span class="number">7</span>, <span class="number">17</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">37</span>, <span class="number">994288</span>)</span><br><span class="line"><span class="comment"># 这两者都能直接转化成str型变量然后直接按照list取法取想要的值就可以了，另可以结合正则表达式。</span></span><br></pre></td></tr></table></figure><hr><h4 id="有关opencv的使用"><a href="#有关opencv的使用" class="headerlink" title="有关opencv的使用"></a>有关opencv的使用</h4><p>opencv完成了人脸识别的内容，在编写代码之前要去opencv github网页下载模型，具体代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">face_recognize</span><span class="params">(self)</span>:</span></span><br><span class="line">        src = self.cv_read_img(self.src_file)</span><br><span class="line">        <span class="keyword">if</span> src <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"><span class="comment"># 最主要的就是下一段代码，只要几句便能够实现人脸识别</span></span><br><span class="line"><span class="comment"># haarcascade_frontalface_alt2.xml 就是需要下载的模型</span></span><br><span class="line">        gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line">        face_cascade = cv.CascadeClassifier(<span class="string">'haarcascade_frontalface_alt2.xml'</span>)</span><br><span class="line">        faces = face_cascade.detectMultiScale(</span><br><span class="line">            gray,</span><br><span class="line">            scaleFactor=<span class="number">1.15</span>,</span><br><span class="line">            minNeighbors=<span class="number">3</span>,</span><br><span class="line">            minSize=(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">            cv.rectangle(src, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        self.decode_and_show_dst(src)</span><br></pre></td></tr></table></figure></p><hr><h4 id="有关os的使用"><a href="#有关os的使用" class="headerlink" title="有关os的使用"></a>有关os的使用</h4><p>主要就是在编程的时候一般不能制定文件绝对路径，这样的会导致没有普适性，所以相对路径很重要。<br>下面就是几种能够获取路径的方法，主要通过os库来实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="comment"># 查看路径是否存在</span></span><br><span class="line">path.exists(path)</span><br><span class="line"><span class="comment"># 获取当前文件上层路径</span></span><br><span class="line">path.dirname(__file__)</span><br><span class="line"><span class="comment"># 获取当前文件的绝对路径</span></span><br><span class="line">path.abspath(__file__)</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.abspath(path)</td><td>返回绝对路径</td><td></td></tr><tr><td>os.path.basename(path)</td><td>返回文件名</td><td></td></tr><tr><td>os.path.commonprefix(list)</td><td>返回list(多个路径)中，所有path共有的最长的路径</td><td></td></tr><tr><td>os.path.dirname(path)</td><td>返回文件路径</td><td></td></tr><tr><td>os.path.exists(path)</td><td>路径存在则返回True,路径损坏返回False</td><td></td></tr><tr><td>os.path.lexists</td><td>路径存在则返回True,路径损坏也返回True</td><td></td></tr><tr><td>os.path.expanduser(path)</td><td>把path中包含的”~”和”~user”转换成用户目录</td><td></td></tr><tr><td>os.path.expandvars(path)</td><td>根据环境变量的值替换path中包含的”$name”和”${name}”</td><td></td></tr><tr><td>os.path.getatime(path)</td><td>返回最近访问时间（浮点型秒数）</td><td></td></tr><tr><td>os.path.getmtime(path)</td><td>返回最近文件修改时间</td><td></td></tr><tr><td>os.path.getctime(path)</td><td>返回文件 path 创建时间</td><td></td></tr><tr><td>os.path.getsize(path)</td><td>返回文件大小，如果文件不存在就返回错误</td><td></td></tr><tr><td>os.path.isabs(path)</td><td>判断是否为绝对路径</td><td></td></tr><tr><td>os.path.isfile(path)</td><td>判断路径是否为文件</td><td></td></tr><tr><td>os.path.isdir(path)</td><td>判断路径是否为目录</td><td></td></tr><tr><td>os.path.islink(path)</td><td>判断路径是否为链接</td><td></td></tr><tr><td>os.path.ismount(path)</td><td>判断路径是否为挂载点</td><td></td></tr><tr><td>os.path.join(path1[, path2[, …]])</td><td>把目录和文件名合成一个路径</td><td></td></tr><tr><td>os.path.normcase(path)</td><td>转换path的大小写和斜杠</td><td></td></tr><tr><td>os.path.normpath(path)</td><td>规范path字符串形式</td><td></td></tr><tr><td>os.path.realpath(path)</td><td>返回path的真实路径</td><td></td></tr><tr><td>os.path.relpath(path[, start])</td><td>从start开始计算相对路径</td><td></td></tr><tr><td>os.path.samefile(path1, path2)</td><td>判断目录或文件是否相同</td><td></td></tr><tr><td>os.path.sameopenfile(fp1, fp2)</td><td>判断fp1和fp2是否指向同一文件</td><td></td></tr><tr><td>os.path.samestat(stat1, stat2)</td><td>判断stat tuple stat1和stat2是否指向同一个文件</td><td></td></tr><tr><td>os.path.split(path)</td><td>把路径分割成 dirname 和 basename，返回一个元组</td><td></td></tr><tr><td>os.path.splitdrive(path)</td><td>一般用在 windows 下，返回驱动器名和路径组成的元组</td><td></td></tr><tr><td>os.path.splitext(path)</td><td>分割路径，返回路径名和文件扩展名的元组</td><td></td></tr><tr><td>os.path.splitunc(path)</td><td>把路径分割为加载点与文件</td><td></td></tr><tr><td>os.path.walk(path, visit, arg)</td><td>遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数</td><td></td></tr><tr><td>os.path.supports_unicode_filenames</td><td>设置是否支持unicode路径名</td><td></td></tr></tbody></table><hr><h6 id="另外知道了如何在terminal里面加入自己的命令，简单来说就是通过alias把你的命令加入到-bash-profile中去。前提是要懂shell-和linux最基础的知识"><a href="#另外知道了如何在terminal里面加入自己的命令，简单来说就是通过alias把你的命令加入到-bash-profile中去。前提是要懂shell-和linux最基础的知识" class="headerlink" title="另外知道了如何在terminal里面加入自己的命令，简单来说就是通过alias把你的命令加入到.bash_profile中去。前提是要懂shell 和linux最基础的知识"></a>另外知道了如何在terminal里面加入自己的命令，简单来说就是通过alias把你的命令加入到<code>.bash_profile</code>中去。前提是要懂shell 和linux最基础的知识</h6><h3 id="下面分享自己做的模二除的计算器与记录日程的工具"><a href="#下面分享自己做的模二除的计算器与记录日程的工具" class="headerlink" title="下面分享自己做的模二除的计算器与记录日程的工具"></a>下面分享自己做的模二除的计算器与记录日程的工具</h3><h4 id="模二除工具"><a href="#模二除工具" class="headerlink" title="模二除工具"></a>模二除工具</h4><p>app界面如下<br><img src="https://github.com/whuchenshuo/whuchenshuo.github.io/raw/master/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-17%2015.05.49.png" alt=""><br>代码如下，首先是实现模二除的 tool.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(int1,int2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (int1-int2)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span><span class="params">(list1,list2)</span>:</span></span><br><span class="line">    list_temp1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list2)):</span><br><span class="line">        list_temp1.append(sign(list1[i],list2[i]))</span><br><span class="line">    <span class="keyword">return</span> list_temp1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(str1,str2)</span>:</span></span><br><span class="line">    list1 = []</span><br><span class="line">    list2 = []</span><br><span class="line">    list_zero = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">        i = int(i)</span><br><span class="line">        list1.append(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str2:</span><br><span class="line">        j = int(j)</span><br><span class="line">        list2.append(j)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> list2:</span><br><span class="line">        list_zero.append(<span class="number">0</span>)</span><br><span class="line">    list_temp = list1[<span class="number">0</span>:len(list2)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list2),len(list1)):</span><br><span class="line">        <span class="keyword">if</span> list_temp[<span class="number">0</span>]==<span class="number">0</span>:</span><br><span class="line">            list_temp = div(list_temp,list_zero)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list_temp = div(list_temp,list2)</span><br><span class="line">        list_temp.append(list1[i])</span><br><span class="line">        list_temp.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> list_temp[<span class="number">0</span>]==<span class="number">0</span>:</span><br><span class="line">        list_temp = div(list_temp,list_zero)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list_temp = div(list_temp,list2)</span><br><span class="line">    list_temp.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> list_temp</span><br></pre></td></tr></table></figure></p><p>然后是实现UI功能的 md2.py（命名最好还是要符合<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP8</a>的编程规范，我这个不好）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file 'Mainwindow.ui'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.13.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore,  QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tools</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">277</span>, <span class="number">190</span>)</span><br><span class="line">        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)</span><br><span class="line">        MainWindow.setDocumentMode(<span class="keyword">False</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">"centralwidget"</span>)</span><br><span class="line">        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)</span><br><span class="line">        self.lineEdit.setGeometry(QtCore.QRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">113</span>, <span class="number">21</span>))</span><br><span class="line">        self.lineEdit.setObjectName(<span class="string">"lineEdit"</span>)</span><br><span class="line">        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)</span><br><span class="line">        self.lineEdit_2.setGeometry(QtCore.QRect(<span class="number">20</span>, <span class="number">60</span>, <span class="number">113</span>, <span class="number">21</span>))</span><br><span class="line">        self.lineEdit_2.setObjectName(<span class="string">"lineEdit_2"</span>)</span><br><span class="line">        self.pushButton = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton.setGeometry(QtCore.QRect(<span class="number">40</span>, <span class="number">100</span>, <span class="number">71</span>, <span class="number">32</span>))</span><br><span class="line">        self.pushButton.setAutoDefault(<span class="keyword">False</span>)</span><br><span class="line">        self.pushButton.setObjectName(<span class="string">"pushButton"</span>)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">        self.label.setGeometry(QtCore.QRect(<span class="number">170</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">16</span>))</span><br><span class="line">        self.label.setAlignment(QtCore.Qt.AlignCenter)</span><br><span class="line">        self.label.setObjectName(<span class="string">"label"</span>)</span><br><span class="line">        self.label_2 = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">        self.label_2.setGeometry(QtCore.QRect(<span class="number">160</span>, <span class="number">60</span>, <span class="number">60</span>, <span class="number">16</span>))</span><br><span class="line">        self.label_2.setText(<span class="string">""</span>)</span><br><span class="line">        self.label_2.setObjectName(<span class="string">"label_2"</span>)</span><br><span class="line">        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton_2.setGeometry(QtCore.QRect(<span class="number">160</span>, <span class="number">100</span>, <span class="number">71</span>, <span class="number">32</span>))</span><br><span class="line">        self.pushButton_2.setObjectName(<span class="string">"pushButton_2"</span>)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.menubar = QtWidgets.QMenuBar(MainWindow)</span><br><span class="line">        self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">277</span>, <span class="number">22</span>))</span><br><span class="line">        self.menubar.setObjectName(<span class="string">"menubar"</span>)</span><br><span class="line">        MainWindow.setMenuBar(self.menubar)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">"statusbar"</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line">        <span class="comment">#这里使用的是connect方法，因为程序很简单，没有另外编写文件实现功能</span></span><br><span class="line">        self.pushButton.clicked.connect(self.click_button)</span><br><span class="line">        self.pushButton_2.clicked.connect(MainWindow.close)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"模2除计算器"</span>))</span><br><span class="line">        self.pushButton.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"go"</span>))</span><br><span class="line">        self.label.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"结果"</span>))</span><br><span class="line">        self.pushButton_2.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"close"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click_button</span><span class="params">(self)</span>:</span></span><br><span class="line">        str1 = self.lineEdit.text()</span><br><span class="line">        str2 = self.lineEdit_2.text()</span><br><span class="line">        <span class="keyword">if</span> str1 == <span class="string">''</span> <span class="keyword">or</span> str2 == <span class="string">''</span>:</span><br><span class="line">            self.label_2.setText(<span class="string">'输入空数据'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str3 = tools.main(str1, str2)</span><br><span class="line">            str3 = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> str3]</span><br><span class="line">            str3 = <span class="string">''</span>.join(str3)</span><br><span class="line">            self.label_2.setText(str3)</span><br></pre></td></tr></table></figure></p><p>最后就是main.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> md2</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    MainWindow = QMainWindow()</span><br><span class="line"></span><br><span class="line">    ui = md2.Ui_MainWindow()</span><br><span class="line">    ui.setupUi(MainWindow)</span><br><span class="line"></span><br><span class="line">    MainWindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><hr><h4 id="记录日程的工具"><a href="#记录日程的工具" class="headerlink" title="记录日程的工具"></a>记录日程的工具</h4><p>在开始一件事情之前记录时间，结束的时候同样记录，对于我个人来说可以提高很多的专注度。约定在这段时间内不能再做任何别的事情。<br>app界面如下<br><img src="https://github.com/whuchenshuo/whuchenshuo.github.io/raw/master/images/%E6%BC%94%E7%A4%BA.gif" alt="演示" title="Daily_Record"></p><p>最终就在文本文档里写入刚刚的内容<br><img src="https://github.com/whuchenshuo/whuchenshuo.github.io/raw/master/images/WechatIMG103.jpeg" alt="Daily_Record文本"><br>代码仍然分三部分，这里只贴出实现功能的DailyRecord.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">title 'Daily Record'</span></span><br><span class="line"><span class="string">aythor whuchenshuo</span></span><br><span class="line"><span class="string">data 2019-07-16</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMessageBox, QMainWindow, QFileDialog</span><br><span class="line"><span class="keyword">from</span> UI2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Daily_Record</span><span class="params">(QMainWindow, Ui_MainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(Daily_Record, self).__init__(parent)</span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        <span class="comment">#要注意这里的路径是不具有移植性的，如果换另一台电脑这里的路径要用os方法更换</span></span><br><span class="line">        initpath = <span class="string">'/Users/al-mac/Desktop'</span></span><br><span class="line">        self.text_file = initpath + <span class="string">'/Daily_Record.txt'</span></span><br><span class="line">        f = open(self.text_file, <span class="string">'r+'</span>)</span><br><span class="line">        f.close(）</span><br><span class="line">        self.show_text()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_text</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(self.text_file, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            text = file.readlines()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">                text = i</span><br><span class="line">            text = <span class="string">''</span>.join(text)</span><br><span class="line">        self.textBrowser.setText(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @QtCore.pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_pushButton_2_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        string = self.lineEdit.text()</span><br><span class="line">        <span class="keyword">if</span> string == <span class="string">'0222'</span>:</span><br><span class="line">            QMessageBox.about(self, <span class="string">''</span>, <span class="string">'小进么么哒 嘻嘻嘻嘻'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> string == <span class="string">'1'</span>:</span><br><span class="line">            QMainWindow.close(self)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        time_begin =time.strftime(<span class="string">"%H:%M"</span>, time.localtime())</span><br><span class="line">        start_string = <span class="string">''</span></span><br><span class="line">        <span class="keyword">with</span> open(self.text_file, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            old_text = file.readlines()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                old_text = old_text[len(old_text)<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                old_text = <span class="string">' '</span></span><br><span class="line">            <span class="keyword">if</span> old_text[len(old_text)<span class="number">-1</span>] == <span class="string">'-'</span>:</span><br><span class="line">                QMessageBox.warning(self, <span class="string">'上个日程未结束'</span>, <span class="string">'请先结束日程'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                start_string = string + <span class="string">' '</span> + time_begin + <span class="string">'-'</span></span><br><span class="line">        <span class="keyword">with</span> open(self.text_file, <span class="string">'a+'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.writelines(start_string)</span><br><span class="line">            QMessageBox.about(self, <span class="string">''</span>, <span class="string">'日程开始'</span>)</span><br><span class="line">        self.show_text()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @QtCore.pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_pushButton_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        time_done = time.strftime(<span class="string">"%H:%M"</span>, time.localtime())</span><br><span class="line">        <span class="keyword">with</span> open(self.text_file,<span class="string">'a+'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(time_done+<span class="string">'\n'</span>)</span><br><span class="line">        QMessageBox.about(self, <span class="string">''</span>, <span class="string">'日程结束'</span>)</span><br><span class="line">        self.show_text()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @QtCore.pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_pushButton_3_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        time_open = time.strftime(<span class="string">"%m-%d"</span>)</span><br><span class="line">        start_day = dt.date(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">17</span>)</span><br><span class="line">        today = dt.date.today()</span><br><span class="line">        days = str(today - start_day)[:<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">with</span> open(self.text_file,<span class="string">'a+'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(time_open+<span class="string">'  考研第'</span>+days+<span class="string">'天\n'</span>)</span><br><span class="line">        QMessageBox.about(self,<span class="string">''</span>,<span class="string">'New Day!'</span>)</span><br><span class="line">        self.show_text()</span><br></pre></td></tr></table></figure></p><p>另外分享最近收藏的<code>图像实验室</code> <code>remix icon</code>等好的资源<br>链接如下<br><a href="https://github.com/whuchenshuo/ImageMiniLab" target="_blank" rel="noopener">图像实验室</a><br><a href="https://remixicon.com/" target="_blank" rel="noopener">icon合集</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天花了很多时间在python的ui处理上，收获了很多经验，也浪费了很多时间，写下这篇总结之后就安心学习了&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.skyjooy.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.skyjooy.cn/tags/python/"/>
    
      <category term="记录" scheme="http://www.skyjooy.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>模2除实现</title>
    <link href="http://www.skyjooy.cn/2019/07/11/%E6%A8%A12%E9%99%A4%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.skyjooy.cn/2019/07/11/模2除实现/</id>
    <published>2019-07-11T15:50:00.000Z</published>
    <updated>2019-07-16T17:46:31.442Z</updated>
    
    <content type="html"><![CDATA[<p>做数据结构时遇到了模2除的问题，发现网络上并没有相关的代码，不算太难所以自己写了一个</p><hr><a id="more"></a><p>运行环境  Python3.5<br>依赖库 无</p><hr><p>代码的功能：实现模2除</p><h4 id="具体代码如下"><a href="#具体代码如下" class="headerlink" title="具体代码如下"></a>具体代码如下</h4><h5 id="str1为被除数，str2为被除数-返回结果为余数"><a href="#str1为被除数，str2为被除数-返回结果为余数" class="headerlink" title="str1为被除数，str2为被除数 返回结果为余数"></a>str1为被除数，str2为被除数 返回结果为余数</h5><h5 id="编写代码的原因是为了更好的进行FCS的验算"><a href="#编写代码的原因是为了更好的进行FCS的验算" class="headerlink" title="编写代码的原因是为了更好的进行FCS的验算"></a>编写代码的原因是为了更好的进行FCS的验算</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">str1 = input(<span class="string">'input:\n'</span>)</span><br><span class="line">str2 = input(<span class="string">'divide:\n'</span>)</span><br><span class="line"><span class="comment">#str1 = '11010110110000'</span></span><br><span class="line"><span class="comment">#str2 = '10011'</span></span><br><span class="line">list1 = []</span><br><span class="line">list2 = []</span><br><span class="line">list_zero = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    i = int(i)</span><br><span class="line">    list1.append(i)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> str2:</span><br><span class="line">    j = int(j)</span><br><span class="line">    list2.append(j)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> list2:</span><br><span class="line">    list_zero.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(int1,int2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (int1-int2)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span><span class="params">(list1,list2)</span>:</span></span><br><span class="line">    list_temp1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list2)):</span><br><span class="line">        list_temp1.append(sign(list1[i],list2[i]))</span><br><span class="line">    <span class="keyword">return</span> list_temp1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    list_temp = list1[<span class="number">0</span>:len(list2)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list2),len(list1)):</span><br><span class="line">        <span class="keyword">if</span> list_temp[<span class="number">0</span>]==<span class="number">0</span>:</span><br><span class="line">            list_temp = div(list_temp,list_zero)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list_temp = div(list_temp,list2)</span><br><span class="line">        list_temp.append(list1[i])</span><br><span class="line">        list_temp.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> list_temp[<span class="number">0</span>]==<span class="number">0</span>:</span><br><span class="line">        list_temp = div(list_temp,list_zero)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list_temp = div(list_temp,list2)</span><br><span class="line">    list_temp.pop(<span class="number">0</span>)</span><br><span class="line">    print(<span class="string">'result: '</span>,list_temp)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>bye 加油</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做数据结构时遇到了模2除的问题，发现网络上并没有相关的代码，不算太难所以自己写了一个&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.skyjooy.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.skyjooy.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>算法题:成绩排序</title>
    <link href="http://www.skyjooy.cn/2019/04/02/%E7%AE%97%E6%B3%95%E9%A2%98-%E6%88%90%E7%BB%A9%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.skyjooy.cn/2019/04/02/算法题-成绩排序/</id>
    <published>2019-04-01T18:45:18.000Z</published>
    <updated>2019-07-16T17:46:07.824Z</updated>
    
    <content type="html"><![CDATA[<h6 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h6><p>查找和排序<br><a id="more"></a><br>题目：输入任意（用户，成绩）序列，可以获得成绩从高到低或从低到高的排列,相同成绩都按先录入排列在前的规则处理。<br>示例：</p><ul><li>jack      70</li><li>peter     96</li><li>Tom       70</li><li>smith     67<br>从高到低  成绩 </li><li>peter     96 </li><li>jack      70 </li><li>Tom       70 </li><li>smith     67<br>从低到高</li><li>smith     67</li><li>jack      70 </li><li>Tom      70 </li><li>peter     96<h6 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h6><blockquote><p>输入多行，先输入要排序的人的个数，然后输入排序方法0（降序）或者1（升序）再分别输入他们的名字和成绩，以一个空格隔开</p></blockquote><h6 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h6><blockquote><p>按照指定方式输出名字和成绩，名字和成绩之间以一个空格隔开</p></blockquote><h6 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h6>  输入<blockquote><pre><code>30fang 90yang 50ning 70输出fang 90ning 70yang 50</code></pre></blockquote></li></ul><p>—<br>解法—python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dic = []</span><br><span class="line">        a, b = int(input()), input()</span><br><span class="line">        isDesc = <span class="keyword">True</span> <span class="keyword">if</span> b == <span class="string">"0"</span> <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(a):</span><br><span class="line">            name, score = input().split()</span><br><span class="line">            dic.append((name, int(score)))</span><br><span class="line">        <span class="keyword">if</span> isDesc:</span><br><span class="line">            tag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tag = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sorted(dic, key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse=tag):</span><br><span class="line">            print(i[<span class="number">0</span>] + <span class="string">" "</span> + str(i[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>python直接使用了自带的sorted函数，并且利用dic很好的解决了类似c/c++中需要构造结构体的尴尬。sorted函数的用法如下：<br>语法</p><blockquote><p><strong>sorted</strong>(iterable, /, *, key=None, reverse=False)</p><p>Return a new list containing all items from the iterable in ascending order.</p><p>A custom key function can be supplied to customize the sort order, and the<br>   reverse flag can be set to request the result in descending order.</p></blockquote><ul><li>iterable –可用来迭代的对象</li><li>key –用来进行排序的元素，可以从可迭代对象中取得</li><li>reverse –排序的规则，True为降序 False为生序（默认）<br>返回值为排序后的list</li></ul><hr><p>解法-c<br>因为使用了快速排序-非稳定排序，导致排序之后次序会发生改变，所以应该采用别种排序，等待修改。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by c on 2019/4/1.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 c. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">&#125;stu;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> tags[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&gt;=r) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = l,j = r,x = s[l],y=tags[l];</span><br><span class="line">    <span class="keyword">while</span> (i&lt;j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;j&amp;&amp;s[j]&gt;=x)</span><br><span class="line">            j--;</span><br><span class="line">        s[i]=s[j];</span><br><span class="line">        tags[i]=tags[j];</span><br><span class="line">        <span class="keyword">while</span> (i&lt;j&amp;&amp;s[i]&lt;x)</span><br><span class="line">            i++;</span><br><span class="line">        s[j]=s[i];</span><br><span class="line">        tags[j]=tags[i];</span><br><span class="line">        &#125;</span><br><span class="line">        s[i]=x;</span><br><span class="line">        tags[i]=y;</span><br><span class="line">        quick_sort(s,tags, l, i<span class="number">-1</span>);</span><br><span class="line">        quick_sort(s,tags, i+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num ,way ;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;num,&amp;way)) &#123;</span><br><span class="line">    stu stulist[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> scores[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> tags[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d"</span>,stulist[i].name,&amp;stulist[i].score);</span><br><span class="line">        stulist[i].tag=(i+<span class="number">1</span>);</span><br><span class="line">        scores[i]=stulist[i].score;</span><br><span class="line">        tags[i]=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(scores,tags, <span class="number">0</span>, num<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">switch</span> (way) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=num<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>,stulist[tags[j]<span class="number">-1</span>].name,scores[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>,stulist[tags[j]<span class="number">-1</span>].name,scores[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h6&gt;&lt;p&gt;查找和排序&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://www.skyjooy.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="http://www.skyjooy.cn/tags/python/"/>
    
      <category term="c/c++" scheme="http://www.skyjooy.cn/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>我们青春着，痛着，快乐着</title>
    <link href="http://www.skyjooy.cn/2019/03/03/%E6%88%91%E4%BB%AC%E9%9D%92%E6%98%A5%E7%9D%80%EF%BC%8C%E7%97%9B%E7%9D%80%EF%BC%8C%E5%BF%AB%E4%B9%90%E7%9D%80/"/>
    <id>http://www.skyjooy.cn/2019/03/03/我们青春着，痛着，快乐着/</id>
    <published>2019-03-02T20:09:38.000Z</published>
    <updated>2020-01-20T07:10:27.725Z</updated>
    
    <content type="html"><![CDATA[<h6 id="起了一个似乎很矫情的标题，像高中的时候，《青春美文》上那些似有似无飘渺又炽热的情感。"><a href="#起了一个似乎很矫情的标题，像高中的时候，《青春美文》上那些似有似无飘渺又炽热的情感。" class="headerlink" title="起了一个似乎很矫情的标题，像高中的时候，《青春美文》上那些似有似无飘渺又炽热的情感。"></a>起了一个似乎很矫情的标题，像高中的时候，《青春美文》上那些似有似无飘渺又炽热的情感。</h6><a id="more"></a><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="370" height="86" src="//music.163.com/outchain/player?type=2&id=4346235&auto=0&height=66"></iframe><br>我是一个特别喜欢记录的人，喜欢回忆，喜欢曾经的那些美好，每一个在我的成长过程中会留下印记的时刻，我都会把它记下来。<br>因为马上就要准备考研了，所以在调整生物钟的过程中，不料今天凌晨醒来，就难以入睡。约莫着过了一两个小时，拿起手机回复了几条消息，想着还是写点什么吧。<br><a href="https://i.loli.net/2019/03/03/5c7af5ba9264d.jpg" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/03/5c7af5ba9264d.jpg" alt="20190222164157_IMG_5976.JPG"></a></p><h6 id="我又回家了"><a href="#我又回家了" class="headerlink" title="我又回家了"></a>我又回家了</h6><p>是的，我现在正躺在家中的小床上。虽然现在和父母话越来越少，但是只言片语，感情总在不言中就体现了出来。如同我上楼睡觉的时候母亲跟我说：“明天我不能送你了”。其实每一次从家中离开，倒没有送一送的，总是打个招呼道个别就走了，父亲把我开车送到火车站。每一次回家，总是能从口中听出父母因为我回家饭菜丰盛了一些。其实我作为独子，随着不断的成长，在家中的角色已经大有不同，也引发了许许多多的问题。但是相互的感情，确实从来没有变过的，改变的只有我对于整个家庭的思考方式，继而引起的说话，做事的改变。<br>前年，和父亲大吵一架，我反思了很久，我至今怀揣着歉意。家长的话总没错，无论如何我都应该尊重生我养我的父亲，而不是任情绪喧嚣，饭桌上大声呵斥我的父亲。我思考良久，发生这件事的原因很多。<br>第一个还是心里暗暗的对家庭的埋怨，埋怨我不能自如的从体制脱身，当时并没有现在的政策。我是委屈的，更多的倒是与家庭没有关系，只恨自己高考实在失败，差不多将近全校一百名的成绩，在我整个高中生涯中算得上最差了，有些事情大概是必然会发生的吧。现在我倒是可以大胆的承认成绩慢慢的变差和小进有着一些关系，但主要是自身的原因（数学选择题错五六个真的不是平时的水平，跟任何人都没有关系，把这二三十分补差不多就是应该考的成绩了。）。<br>第二个应该是很多人都会出现的，因为自身经历的成长随之带来家庭角色改变的冲突。我当时最生气的是父亲的一句话“他那样想就是错的”，抑制不住的怒气掩盖了我理智的心绪。因为尊重任何的选择和生活方式已经成为我的信念组成部分，可笑的是我在阻止父亲说话的同时已经违背了自己的信条。随着我看的越多，想的越多，和原生家庭已经又了越来越多的分歧，有的是阅历多少产生的，有的是学习经历产生的。当我意识到父母只不过是万千家庭中的普通人的时候好了很多，我不能奢求太多，并不是所有问题都在家庭中能够寻找到答案。现在的我和父母的关系并不太好，小进说似乎我们没有什么交集，其实并不是这样的，只不过现在大家都有无法言语的默契。他们很关心我，然而也只能默默的关心我，不敢再多说我一句，甚至建议都不敢，我很后悔跟他们发脾气，或者是过多的宣扬自己的思想。作为儿子，理所应当多一些聆听，而不是“教导”，互相交流，而不是互相说服。<br>很普通的家庭，很善良的父母，市井的缺点固然也有，但是父母子女的感情，于我来说实在是太厚重了。希望他们身体健康，能够过的好一点。</p><h6 id="一定要考研"><a href="#一定要考研" class="headerlink" title="一定要考研"></a>一定要考研</h6><p>准备考研了，本来也是计划之中的事情-如果工作不好就准备考研。还有不到半年就要毕业了，如果让我评价自己的大学生活我一定会说自己是失败的。不过也很少有让我满意的事情。<br>在学校的遗憾很多吧，一些是环境造成的，更多的是自己限制了自己，也是我对家庭的遗憾，对自己的遗憾，我有一些我难以逾越的缺点，哪怕认识到了。即便在政策出来之前，我也没有把自己过的很优秀，骨干经历也就一般，体能一般，成绩一般，似乎什么都一般，校园经历也不丰富。回头看看自己身边的人，又觉得自己还不错，甚至在课下的时间了解了互联网的很多事情，学了python的很多用法，写了一些脚本，学了一些身边的人不可能接触到的知识。也连着参加了三年的军训工作，带过低年级的gfs，多了一群喊我班长的人；去过武装部做军训助理，在学校武装部官网写错了领导人的名字被党宣的人打电话催着改，也见识了学校组织的庞大，管中窥到了政治生涯的豹；也去医学部带过00后，一群可爱的小姑娘和青涩的少年，有着当年自己的模样，希望他们会更好。最最重要的是心底总有一团火焰闪烁不曾熄灭。<em>大概每个人都是平凡的吧</em>这句话是我最近才深刻体会到的。我常感慨不优秀的人总有不优秀的原因，优秀的人总有往上走的因素，在庐山外更能清晰的看到个人的枷锁。<br>知乎上有个问题，作为家中唯一的985/211学生是什么感觉，我没点进去看，因为我的感觉实在是太强烈了。从小到达都是被人夸大的，至少在上高中之前都是同龄人之中的佼佼者，<em>聪明、好看、qio、懂事</em>就是当时自己身上的标签，到了高中才感受到了其实自己也没有那么的优秀，总有考试比你成绩更好的人。上了大学，虽然降分录取了，但是还是武大。家长都很高兴，我却一点都高兴不起来。带16级学弟军训的时候，我经常跟他们说，单论分数在这几个操场上站着的七千多人里面，你们就是最差的那几十人。有时候我可能太残酷了。想跟大二的时候作为我的两个班长的学弟道个歉，我没有充分的了解他们的工作，批评的太厉害了，万分对不起。<br>另外很成熟的一个学弟，李晓勇。他总能体会到你眼中幽深的黑暗，可能大家都是“夜行动物”。<br>回到考研的话题，本质还是对于自己的不满，希望自己能够变得更好吧，这是最重要的。我实在是太难对自己满意了，为此我常常感到难过，眼里也少了天真。不过就像之前说的，心里的一团火却一直都燃烧着旺盛，它会支持我前行。考不上的事情，就等考不上再说吧。</p><h6 id="我和小进"><a href="#我和小进" class="headerlink" title="我和小进"></a>我和小进</h6><p>小进是我生命中最重要的女孩子。<br>我们的恋爱是坎坷的，我很抱歉。大学的前几年真是太难过了。忽的想起来之前有一次和哥哥们吃饭忍不住的哭了起来。原因是觉得自己丢掉了自己的很多东西因为要强迫自己去适应体制，算了，不说这个话题了。<br>黑暗的基调总是难以绽放出彩色的。小进和我恋爱的这几年，我没有做过什么浪漫的事情，电话也打得少，更不会说什么情话，有的时候甚至还会忽略她的感受。我有些自我，过年的时候小进的幽怨突然爆发，让我有些难以接受，我至今也忘不了那种悲伤独我，弃你而去的感觉。算了不说了。怪我<br>我一直觉得我们不像情侣，我后来明白是因为我们双方都不太懂恋爱，异地恋让我们迟迟没有进入恋爱的节奏。本该朝夕相处，热烈交谈的我们最后只剩下每天的晚安。我常常问我自己是否是真的喜欢眼前的这个女孩儿，我闭上眼想着她的样子，是真的喜欢。在即刻，在抖音，我看到很多情侣，我很羡慕。以前我总是问为什么我们没有别人那个样子，随着我们的逐渐成长，我相信我们会变得更好。<br>有些话突然又不知道怎么说了，似乎有千言万语。我觉得我们会互相为了对方改变，我们会走到最后，结婚生子，就这样。</p><h5 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h5><p>该睡了，其实还有没有说的更多的故事。作为GFS的故事，和雨情君子之交淡如水的“闺蜜”情，和大学最重要的一个人杨坤骞的故事，放着以后再娓娓道来。<br>希望我爱的人身体健康，开开心心。自己考研加油。<br>再见。</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;起了一个似乎很矫情的标题，像高中的时候，《青春美文》上那些似有似无飘渺又炽热的情感。&quot;&gt;&lt;a href=&quot;#起了一个似乎很矫情的标题，像高中的时候，《青春美文》上那些似有似无飘渺又炽热的情感。&quot; class=&quot;headerlink&quot; title=&quot;起了一个似乎很矫情的标题，像高中的时候，《青春美文》上那些似有似无飘渺又炽热的情感。&quot;&gt;&lt;/a&gt;起了一个似乎很矫情的标题，像高中的时候，《青春美文》上那些似有似无飘渺又炽热的情感。&lt;/h6&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.skyjooy.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="记录" scheme="http://www.skyjooy.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="回忆" scheme="http://www.skyjooy.cn/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>当我们在回忆过去时，我们究竟在回忆什么</title>
    <link href="http://www.skyjooy.cn/2019/01/17/%E9%BE%99%E6%97%8F/"/>
    <id>http://www.skyjooy.cn/2019/01/17/龙族/</id>
    <published>2019-01-17T06:40:41.000Z</published>
    <updated>2019-01-17T09:09:25.427Z</updated>
    
    <content type="html"><![CDATA[<h5 id="我们的《龙族》"><a href="#我们的《龙族》" class="headerlink" title="我们的《龙族》"></a>我们的《龙族》</h5><p>最近发现了一个很好的app<code>微信读书</code>,在里面偶然看到了新出的《龙族Ⅴ：悼亡者的归来》，丝毫不犹豫的就看了起来。其实我并不是一个很忠实的龙族粉丝。<a id="more"></a>那是高中的时候，我花了几个中午将龙族1-3匆匆看完了。直到高中毕业，路明非依然带着他的1/4条命活了下来。</p><p>是个关于冒险的故事，楚子航的黄金瞳，像艾斯火焰果实的言灵：君焰。明非的小恶魔明泽总是在恰当的时候让明飞化成“龙王”。与主角在一起的还有少女，夏弥死在了楚子航的刀下，绘梨衣被惨死变成白王容器。还有被父亲当成工具的诺诺。那时候大家都是很天真的，室友因为绘梨衣的死亡几天高兴不起来。绘梨衣是个很简单的女孩，她把自己的全部都与明非分享，所有的玩具都写上了sakura&amp;绘梨衣。最终，却因为自己的白王之血死去。我也很喜欢龙族，路明非是一个孩子，是一个刚开始什么都不会的孩子，只能通过交换性命来获得仿佛龙王的能力。<br>那个时候还有另一部动漫《东京食尸鬼》，我很喜欢。<br>同样是一个懦弱的孩子，在折磨下吃了壁虎变成了白发。我还记得我的第一个python脚本就是制作了一个金木和董香的词云。<br><img src="https://ww1.sinaimg.cn/large/007rAy9hgy1fz9l5xh8wvj30zk0qoqcp.jpg%0A" alt="" title="东京食尸鬼"><br>虽然现在东京食尸鬼烂尾了，但是依然抹不去它的重要性。我现在依然记得里面的一句话 </p><blockquote><p>世界上所有的不公平，都是因为当事人能力不足所造成的</p></blockquote><p>多多少少对现在的我有一些影响。<br>高中的时候并没有很多可以看的，可以读的。而这些东西在当时的我们中间留下了许多的回忆。</p><h6 id="那时候"><a href="#那时候" class="headerlink" title="那时候"></a>那时候</h6><p>那个时候龙族是从yj手里面传给我的，他就是那个因为绘梨衣死去几天缓不过来的室友。当时寝室数码产品很少，yj和另一位朋友一起买了一个MP5，一个多媒体播放器。那个时候东京食尸鬼一周一更，他们中午就回去网吧下载回来，寝室的宅男们一起看。有个很经典的场景我还记得，当时为了逃脱老师们的查寝，我们五六个人蹲在厕所一起看，巧的是当时寝室长没吃饭，所以他就在厕所端着一碗汤达人和我们一起看。对，我们厕所确实挺大的。<br>《小说绘》在那个时候是比较奢侈的，所以基本上都是有人买一本之后大家互相传看，《浮生物语》也是那个时候接触到的。还有《动漫报》和《篮球报》。<br>我写下这些，希望自己以后不要忘记。回忆，总是额外珍惜。<br>那个时候很喜欢看书，什么都想阅读，想从书里面发现更多的世界。高二的时候，中午教室人走光之后，我就会坐到靠窗的那边。有时候晒太阳，有时候看书，有时候就那样静静地看着小食堂下面的人来人往。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;我们的《龙族》&quot;&gt;&lt;a href=&quot;#我们的《龙族》&quot; class=&quot;headerlink&quot; title=&quot;我们的《龙族》&quot;&gt;&lt;/a&gt;我们的《龙族》&lt;/h5&gt;&lt;p&gt;最近发现了一个很好的app&lt;code&gt;微信读书&lt;/code&gt;,在里面偶然看到了新出的《龙族Ⅴ：悼亡者的归来》，丝毫不犹豫的就看了起来。其实我并不是一个很忠实的龙族粉丝。
    
    </summary>
    
      <category term="随笔" scheme="http://www.skyjooy.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="python" scheme="http://www.skyjooy.cn/tags/python/"/>
    
      <category term="记录" scheme="http://www.skyjooy.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>定时发送jike脚本</title>
    <link href="http://www.skyjooy.cn/2018/12/18/%E5%AE%9A%E6%97%B6%E5%8F%91%E9%80%81jike%E8%84%9A%E6%9C%AC/"/>
    <id>http://www.skyjooy.cn/2018/12/18/定时发送jike脚本/</id>
    <published>2018-12-17T16:38:29.000Z</published>
    <updated>2019-07-16T17:45:11.434Z</updated>
    
    <content type="html"><![CDATA[<p>Thanks for the <a href="https://github.com/Sorosliu1029/Jike-Metro" target="_blank" rel="noopener">Jike-Metro</a><br>对了 ，<code>即刻</code>是一个非常有趣的资讯-社交app</p><hr><a id="more"></a><p>运行环境 Ubuntu 16.04.3  Python3.5<br>依赖库 jike BeautifulSoup requests<br>其他 linux crontab定时任务命令</p><hr><p>脚本的功能：每天晚上找一句话，并且道晚安<br><del>当然是因为寂寞</del></p><h4 id="效果如图"><a href="#效果如图" class="headerlink" title="效果如图"></a>效果如图</h4><img src="https://i.loli.net/2018/12/19/5c19dc6dc7a4b.png" width="400" height="200"><p>文字来源：<a href="https://www.juzimi.com/" target="_blank" rel="noopener">句子网</a></p><hr><h5 id="功能的实现分为三部分"><a href="#功能的实现分为三部分" class="headerlink" title="功能的实现分为三部分"></a>功能的实现分为三部分</h5><h6 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jike</span><br><span class="line"><span class="keyword">import</span> juzi</span><br><span class="line"><span class="comment">#借助于 Jike-Metro 可以很简单的发送动态</span></span><br><span class="line"><span class="comment">#诸如评论，点赞等功能都可以实现</span></span><br><span class="line"><span class="comment">#具体可以进入github进行查阅</span></span><br><span class="line">c = jike.JikeClient()</span><br><span class="line">result = juzi.get_text()</span><br><span class="line">hehe = c.create_my_post(result)</span><br></pre></td></tr></table></figure><h6 id="获取发送内容"><a href="#获取发送内容" class="headerlink" title="获取发送内容"></a>获取发送内容</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_url</span><span class="params">(finalpage)</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.juzimi.com/article/%E8%8F%9C%E6%A0%B9%E8%B0%AD?page='</span> + str(finalpage)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"><span class="comment"># make_url函数用于生成我们获取页面url，</span></span><br><span class="line"><span class="comment"># 句子网特定文章每一页url就是在后面加上?page=num</span></span><br><span class="line"><span class="comment"># 如果有selenium则可以实现自动搜索获取页面，不用在此处切换基础url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;<span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) '</span><span class="string">''</span></span><br><span class="line">                                 <span class="string">'Chrome/70.0.3538.110 Safari/537.36'</span>&#125;</span><br><span class="line">        r = requests.get(url,timeout=<span class="number">30</span>,headers=headers)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'ERROR'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_text</span><span class="params">()</span>:</span></span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    results = []</span><br><span class="line">    pages,lines = get_pages_lines()</span><br><span class="line">    url = make_url(pages)</span><br><span class="line">    html = get_html(url)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment">#title_raw = 'views-row-' + str(1)</span></span><br><span class="line">    text = soup.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: re.compile(<span class="string">'views-row views-row-'</span> +str(lines))&#125;)</span><br><span class="line"><span class="comment"># 利用正则表达式搜索class包含'views-row views-row-num'标签的元素</span></span><br><span class="line"><span class="comment"># 即可定位到我们需要的内容</span></span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> text:</span><br><span class="line">        result = div.find(title=<span class="string">'查看本句'</span>).text.strip()</span><br><span class="line">        <span class="comment">#results.append(result)</span></span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pages_lines</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment"># 利用日期获得特定文章/作者的 页数和行数</span></span><br><span class="line"><span class="comment"># 句子网默认一页有十个句子</span></span><br><span class="line">    temp = (time.strftime(<span class="string">'%d/%m/%y'</span>)).split(<span class="string">'/'</span>)[<span class="number">0</span>]</span><br><span class="line">    temp = int(temp)</span><br><span class="line">    pages = (temp<span class="number">-1</span>)//<span class="number">10</span></span><br><span class="line">    lines = temp % <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> lines == <span class="number">10</span>:</span><br><span class="line">        lines += <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> pages, lines</span><br></pre></td></tr></table></figure><h6 id="定时发送的实现"><a href="#定时发送的实现" class="headerlink" title="定时发送的实现"></a>定时发送的实现</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 22 * * * <span class="built_in">cd</span> /project/jike_goodnight;python3 file1.py</span><br></pre></td></tr></table></figure><hr><p>友情链接：<br><a href="http://www.runoob.com/linux/linux-comm-crontab.html" target="_blank" rel="noopener">Linux crontab命令用法</a><br><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">BeautifulSoup库官方中文文档</a><br><a href="https://www.juzimi.com/" target="_blank" rel="noopener">一个收藏好句子的网站：句子迷</a></p><p>Bye </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Thanks for the &lt;a href=&quot;https://github.com/Sorosliu1029/Jike-Metro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jike-Metro&lt;/a&gt;&lt;br&gt;对了 ，&lt;code&gt;即刻&lt;/code&gt;是一个非常有趣的资讯-社交app&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="python脚本" scheme="http://www.skyjooy.cn/categories/python%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="jike" scheme="http://www.skyjooy.cn/tags/jike/"/>
    
      <category term="python" scheme="http://www.skyjooy.cn/tags/python/"/>
    
      <category term="linux" scheme="http://www.skyjooy.cn/tags/linux/"/>
    
  </entry>
  
</feed>
